$date
	Sun Apr  2 21:35:12 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 8 ! opcode_tmp [7:0] $end
$var wire 8 " zcv_correct [7:0] $end
$var wire 1 # zero_out $end
$var wire 3 $ zcv_out [2:0] $end
$var wire 32 % result_out [31:0] $end
$var wire 32 & result_correct [31:0] $end
$var wire 1 ' overflow_out $end
$var wire 1 ( cout_out $end
$var reg 1 ) clk $end
$var reg 6 * error_count [5:0] $end
$var reg 6 + error_count_tmp [5:0] $end
$var reg 4 , operation_in [3:0] $end
$var reg 6 - pattern_count [5:0] $end
$var reg 1 . rst_n $end
$var reg 32 / src1_in [31:0] $end
$var reg 32 0 src2_in [31:0] $end
$var reg 1 1 start_check $end
$scope module alu $end
$var wire 4 2 ALU_control [3:0] $end
$var wire 1 ) clk $end
$var wire 1 . rst_n $end
$var wire 32 3 src1 [31:0] $end
$var wire 32 4 src2 [31:0] $end
$var wire 32 5 r [31:0] $end
$var wire 32 6 co [31:0] $end
$var reg 1 ( cout $end
$var reg 1 ' overflow $end
$var reg 32 7 result [31:0] $end
$var reg 1 # zero $end
$scope module ALU00 $end
$var wire 1 8 A_invert $end
$var wire 1 9 B_invert $end
$var wire 1 : cin $end
$var wire 1 ; less $end
$var wire 2 < operation [1:0] $end
$var wire 1 = src1 $end
$var wire 1 > src2 $end
$var wire 1 ? add_r $end
$var wire 1 @ add_c $end
$var reg 1 A cout $end
$var reg 1 B result $end
$scope module adder $end
$var wire 1 C A $end
$var wire 1 D B $end
$var wire 1 : cin $end
$var wire 1 @ cout $end
$var wire 1 ? result $end
$var wire 1 E w1 $end
$var wire 1 F w2 $end
$var wire 1 G w3 $end
$upscope $end
$upscope $end
$scope module ALU01 $end
$var wire 1 H A_invert $end
$var wire 1 I B_invert $end
$var wire 1 J cin $end
$var wire 1 K less $end
$var wire 2 L operation [1:0] $end
$var wire 1 M src1 $end
$var wire 1 N src2 $end
$var wire 1 O add_r $end
$var wire 1 P add_c $end
$var reg 1 Q cout $end
$var reg 1 R result $end
$scope module adder $end
$var wire 1 S A $end
$var wire 1 T B $end
$var wire 1 J cin $end
$var wire 1 P cout $end
$var wire 1 O result $end
$var wire 1 U w1 $end
$var wire 1 V w2 $end
$var wire 1 W w3 $end
$upscope $end
$upscope $end
$scope module ALU02 $end
$var wire 1 X A_invert $end
$var wire 1 Y B_invert $end
$var wire 1 Z cin $end
$var wire 1 [ less $end
$var wire 2 \ operation [1:0] $end
$var wire 1 ] src1 $end
$var wire 1 ^ src2 $end
$var wire 1 _ add_r $end
$var wire 1 ` add_c $end
$var reg 1 a cout $end
$var reg 1 b result $end
$scope module adder $end
$var wire 1 c A $end
$var wire 1 d B $end
$var wire 1 Z cin $end
$var wire 1 ` cout $end
$var wire 1 _ result $end
$var wire 1 e w1 $end
$var wire 1 f w2 $end
$var wire 1 g w3 $end
$upscope $end
$upscope $end
$scope module ALU03 $end
$var wire 1 h A_invert $end
$var wire 1 i B_invert $end
$var wire 1 j cin $end
$var wire 1 k less $end
$var wire 2 l operation [1:0] $end
$var wire 1 m src1 $end
$var wire 1 n src2 $end
$var wire 1 o add_r $end
$var wire 1 p add_c $end
$var reg 1 q cout $end
$var reg 1 r result $end
$scope module adder $end
$var wire 1 s A $end
$var wire 1 t B $end
$var wire 1 j cin $end
$var wire 1 p cout $end
$var wire 1 o result $end
$var wire 1 u w1 $end
$var wire 1 v w2 $end
$var wire 1 w w3 $end
$upscope $end
$upscope $end
$scope module ALU04 $end
$var wire 1 x A_invert $end
$var wire 1 y B_invert $end
$var wire 1 z cin $end
$var wire 1 { less $end
$var wire 2 | operation [1:0] $end
$var wire 1 } src1 $end
$var wire 1 ~ src2 $end
$var wire 1 !" add_r $end
$var wire 1 "" add_c $end
$var reg 1 #" cout $end
$var reg 1 $" result $end
$scope module adder $end
$var wire 1 %" A $end
$var wire 1 &" B $end
$var wire 1 z cin $end
$var wire 1 "" cout $end
$var wire 1 !" result $end
$var wire 1 '" w1 $end
$var wire 1 (" w2 $end
$var wire 1 )" w3 $end
$upscope $end
$upscope $end
$scope module ALU05 $end
$var wire 1 *" A_invert $end
$var wire 1 +" B_invert $end
$var wire 1 ," cin $end
$var wire 1 -" less $end
$var wire 2 ." operation [1:0] $end
$var wire 1 /" src1 $end
$var wire 1 0" src2 $end
$var wire 1 1" add_r $end
$var wire 1 2" add_c $end
$var reg 1 3" cout $end
$var reg 1 4" result $end
$scope module adder $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 ," cin $end
$var wire 1 2" cout $end
$var wire 1 1" result $end
$var wire 1 7" w1 $end
$var wire 1 8" w2 $end
$var wire 1 9" w3 $end
$upscope $end
$upscope $end
$scope module ALU06 $end
$var wire 1 :" A_invert $end
$var wire 1 ;" B_invert $end
$var wire 1 <" cin $end
$var wire 1 =" less $end
$var wire 2 >" operation [1:0] $end
$var wire 1 ?" src1 $end
$var wire 1 @" src2 $end
$var wire 1 A" add_r $end
$var wire 1 B" add_c $end
$var reg 1 C" cout $end
$var reg 1 D" result $end
$scope module adder $end
$var wire 1 E" A $end
$var wire 1 F" B $end
$var wire 1 <" cin $end
$var wire 1 B" cout $end
$var wire 1 A" result $end
$var wire 1 G" w1 $end
$var wire 1 H" w2 $end
$var wire 1 I" w3 $end
$upscope $end
$upscope $end
$scope module ALU07 $end
$var wire 1 J" A_invert $end
$var wire 1 K" B_invert $end
$var wire 1 L" cin $end
$var wire 1 M" less $end
$var wire 2 N" operation [1:0] $end
$var wire 1 O" src1 $end
$var wire 1 P" src2 $end
$var wire 1 Q" add_r $end
$var wire 1 R" add_c $end
$var reg 1 S" cout $end
$var reg 1 T" result $end
$scope module adder $end
$var wire 1 U" A $end
$var wire 1 V" B $end
$var wire 1 L" cin $end
$var wire 1 R" cout $end
$var wire 1 Q" result $end
$var wire 1 W" w1 $end
$var wire 1 X" w2 $end
$var wire 1 Y" w3 $end
$upscope $end
$upscope $end
$scope module ALU08 $end
$var wire 1 Z" A_invert $end
$var wire 1 [" B_invert $end
$var wire 1 \" cin $end
$var wire 1 ]" less $end
$var wire 2 ^" operation [1:0] $end
$var wire 1 _" src1 $end
$var wire 1 `" src2 $end
$var wire 1 a" add_r $end
$var wire 1 b" add_c $end
$var reg 1 c" cout $end
$var reg 1 d" result $end
$scope module adder $end
$var wire 1 e" A $end
$var wire 1 f" B $end
$var wire 1 \" cin $end
$var wire 1 b" cout $end
$var wire 1 a" result $end
$var wire 1 g" w1 $end
$var wire 1 h" w2 $end
$var wire 1 i" w3 $end
$upscope $end
$upscope $end
$scope module ALU09 $end
$var wire 1 j" A_invert $end
$var wire 1 k" B_invert $end
$var wire 1 l" cin $end
$var wire 1 m" less $end
$var wire 2 n" operation [1:0] $end
$var wire 1 o" src1 $end
$var wire 1 p" src2 $end
$var wire 1 q" add_r $end
$var wire 1 r" add_c $end
$var reg 1 s" cout $end
$var reg 1 t" result $end
$scope module adder $end
$var wire 1 u" A $end
$var wire 1 v" B $end
$var wire 1 l" cin $end
$var wire 1 r" cout $end
$var wire 1 q" result $end
$var wire 1 w" w1 $end
$var wire 1 x" w2 $end
$var wire 1 y" w3 $end
$upscope $end
$upscope $end
$scope module ALU10 $end
$var wire 1 z" A_invert $end
$var wire 1 {" B_invert $end
$var wire 1 |" cin $end
$var wire 1 }" less $end
$var wire 2 ~" operation [1:0] $end
$var wire 1 !# src1 $end
$var wire 1 "# src2 $end
$var wire 1 ## add_r $end
$var wire 1 $# add_c $end
$var reg 1 %# cout $end
$var reg 1 &# result $end
$scope module adder $end
$var wire 1 '# A $end
$var wire 1 (# B $end
$var wire 1 |" cin $end
$var wire 1 $# cout $end
$var wire 1 ## result $end
$var wire 1 )# w1 $end
$var wire 1 *# w2 $end
$var wire 1 +# w3 $end
$upscope $end
$upscope $end
$scope module ALU11 $end
$var wire 1 ,# A_invert $end
$var wire 1 -# B_invert $end
$var wire 1 .# cin $end
$var wire 1 /# less $end
$var wire 2 0# operation [1:0] $end
$var wire 1 1# src1 $end
$var wire 1 2# src2 $end
$var wire 1 3# add_r $end
$var wire 1 4# add_c $end
$var reg 1 5# cout $end
$var reg 1 6# result $end
$scope module adder $end
$var wire 1 7# A $end
$var wire 1 8# B $end
$var wire 1 .# cin $end
$var wire 1 4# cout $end
$var wire 1 3# result $end
$var wire 1 9# w1 $end
$var wire 1 :# w2 $end
$var wire 1 ;# w3 $end
$upscope $end
$upscope $end
$scope module ALU12 $end
$var wire 1 <# A_invert $end
$var wire 1 =# B_invert $end
$var wire 1 ># cin $end
$var wire 1 ?# less $end
$var wire 2 @# operation [1:0] $end
$var wire 1 A# src1 $end
$var wire 1 B# src2 $end
$var wire 1 C# add_r $end
$var wire 1 D# add_c $end
$var reg 1 E# cout $end
$var reg 1 F# result $end
$scope module adder $end
$var wire 1 G# A $end
$var wire 1 H# B $end
$var wire 1 ># cin $end
$var wire 1 D# cout $end
$var wire 1 C# result $end
$var wire 1 I# w1 $end
$var wire 1 J# w2 $end
$var wire 1 K# w3 $end
$upscope $end
$upscope $end
$scope module ALU13 $end
$var wire 1 L# A_invert $end
$var wire 1 M# B_invert $end
$var wire 1 N# cin $end
$var wire 1 O# less $end
$var wire 2 P# operation [1:0] $end
$var wire 1 Q# src1 $end
$var wire 1 R# src2 $end
$var wire 1 S# add_r $end
$var wire 1 T# add_c $end
$var reg 1 U# cout $end
$var reg 1 V# result $end
$scope module adder $end
$var wire 1 W# A $end
$var wire 1 X# B $end
$var wire 1 N# cin $end
$var wire 1 T# cout $end
$var wire 1 S# result $end
$var wire 1 Y# w1 $end
$var wire 1 Z# w2 $end
$var wire 1 [# w3 $end
$upscope $end
$upscope $end
$scope module ALU14 $end
$var wire 1 \# A_invert $end
$var wire 1 ]# B_invert $end
$var wire 1 ^# cin $end
$var wire 1 _# less $end
$var wire 2 `# operation [1:0] $end
$var wire 1 a# src1 $end
$var wire 1 b# src2 $end
$var wire 1 c# add_r $end
$var wire 1 d# add_c $end
$var reg 1 e# cout $end
$var reg 1 f# result $end
$scope module adder $end
$var wire 1 g# A $end
$var wire 1 h# B $end
$var wire 1 ^# cin $end
$var wire 1 d# cout $end
$var wire 1 c# result $end
$var wire 1 i# w1 $end
$var wire 1 j# w2 $end
$var wire 1 k# w3 $end
$upscope $end
$upscope $end
$scope module ALU15 $end
$var wire 1 l# A_invert $end
$var wire 1 m# B_invert $end
$var wire 1 n# cin $end
$var wire 1 o# less $end
$var wire 2 p# operation [1:0] $end
$var wire 1 q# src1 $end
$var wire 1 r# src2 $end
$var wire 1 s# add_r $end
$var wire 1 t# add_c $end
$var reg 1 u# cout $end
$var reg 1 v# result $end
$scope module adder $end
$var wire 1 w# A $end
$var wire 1 x# B $end
$var wire 1 n# cin $end
$var wire 1 t# cout $end
$var wire 1 s# result $end
$var wire 1 y# w1 $end
$var wire 1 z# w2 $end
$var wire 1 {# w3 $end
$upscope $end
$upscope $end
$scope module ALU16 $end
$var wire 1 |# A_invert $end
$var wire 1 }# B_invert $end
$var wire 1 ~# cin $end
$var wire 1 !$ less $end
$var wire 2 "$ operation [1:0] $end
$var wire 1 #$ src1 $end
$var wire 1 $$ src2 $end
$var wire 1 %$ add_r $end
$var wire 1 &$ add_c $end
$var reg 1 '$ cout $end
$var reg 1 ($ result $end
$scope module adder $end
$var wire 1 )$ A $end
$var wire 1 *$ B $end
$var wire 1 ~# cin $end
$var wire 1 &$ cout $end
$var wire 1 %$ result $end
$var wire 1 +$ w1 $end
$var wire 1 ,$ w2 $end
$var wire 1 -$ w3 $end
$upscope $end
$upscope $end
$scope module ALU17 $end
$var wire 1 .$ A_invert $end
$var wire 1 /$ B_invert $end
$var wire 1 0$ cin $end
$var wire 1 1$ less $end
$var wire 2 2$ operation [1:0] $end
$var wire 1 3$ src1 $end
$var wire 1 4$ src2 $end
$var wire 1 5$ add_r $end
$var wire 1 6$ add_c $end
$var reg 1 7$ cout $end
$var reg 1 8$ result $end
$scope module adder $end
$var wire 1 9$ A $end
$var wire 1 :$ B $end
$var wire 1 0$ cin $end
$var wire 1 6$ cout $end
$var wire 1 5$ result $end
$var wire 1 ;$ w1 $end
$var wire 1 <$ w2 $end
$var wire 1 =$ w3 $end
$upscope $end
$upscope $end
$scope module ALU18 $end
$var wire 1 >$ A_invert $end
$var wire 1 ?$ B_invert $end
$var wire 1 @$ cin $end
$var wire 1 A$ less $end
$var wire 2 B$ operation [1:0] $end
$var wire 1 C$ src1 $end
$var wire 1 D$ src2 $end
$var wire 1 E$ add_r $end
$var wire 1 F$ add_c $end
$var reg 1 G$ cout $end
$var reg 1 H$ result $end
$scope module adder $end
$var wire 1 I$ A $end
$var wire 1 J$ B $end
$var wire 1 @$ cin $end
$var wire 1 F$ cout $end
$var wire 1 E$ result $end
$var wire 1 K$ w1 $end
$var wire 1 L$ w2 $end
$var wire 1 M$ w3 $end
$upscope $end
$upscope $end
$scope module ALU19 $end
$var wire 1 N$ A_invert $end
$var wire 1 O$ B_invert $end
$var wire 1 P$ cin $end
$var wire 1 Q$ less $end
$var wire 2 R$ operation [1:0] $end
$var wire 1 S$ src1 $end
$var wire 1 T$ src2 $end
$var wire 1 U$ add_r $end
$var wire 1 V$ add_c $end
$var reg 1 W$ cout $end
$var reg 1 X$ result $end
$scope module adder $end
$var wire 1 Y$ A $end
$var wire 1 Z$ B $end
$var wire 1 P$ cin $end
$var wire 1 V$ cout $end
$var wire 1 U$ result $end
$var wire 1 [$ w1 $end
$var wire 1 \$ w2 $end
$var wire 1 ]$ w3 $end
$upscope $end
$upscope $end
$scope module ALU20 $end
$var wire 1 ^$ A_invert $end
$var wire 1 _$ B_invert $end
$var wire 1 `$ cin $end
$var wire 1 a$ less $end
$var wire 2 b$ operation [1:0] $end
$var wire 1 c$ src1 $end
$var wire 1 d$ src2 $end
$var wire 1 e$ add_r $end
$var wire 1 f$ add_c $end
$var reg 1 g$ cout $end
$var reg 1 h$ result $end
$scope module adder $end
$var wire 1 i$ A $end
$var wire 1 j$ B $end
$var wire 1 `$ cin $end
$var wire 1 f$ cout $end
$var wire 1 e$ result $end
$var wire 1 k$ w1 $end
$var wire 1 l$ w2 $end
$var wire 1 m$ w3 $end
$upscope $end
$upscope $end
$scope module ALU21 $end
$var wire 1 n$ A_invert $end
$var wire 1 o$ B_invert $end
$var wire 1 p$ cin $end
$var wire 1 q$ less $end
$var wire 2 r$ operation [1:0] $end
$var wire 1 s$ src1 $end
$var wire 1 t$ src2 $end
$var wire 1 u$ add_r $end
$var wire 1 v$ add_c $end
$var reg 1 w$ cout $end
$var reg 1 x$ result $end
$scope module adder $end
$var wire 1 y$ A $end
$var wire 1 z$ B $end
$var wire 1 p$ cin $end
$var wire 1 v$ cout $end
$var wire 1 u$ result $end
$var wire 1 {$ w1 $end
$var wire 1 |$ w2 $end
$var wire 1 }$ w3 $end
$upscope $end
$upscope $end
$scope module ALU22 $end
$var wire 1 ~$ A_invert $end
$var wire 1 !% B_invert $end
$var wire 1 "% cin $end
$var wire 1 #% less $end
$var wire 2 $% operation [1:0] $end
$var wire 1 %% src1 $end
$var wire 1 &% src2 $end
$var wire 1 '% add_r $end
$var wire 1 (% add_c $end
$var reg 1 )% cout $end
$var reg 1 *% result $end
$scope module adder $end
$var wire 1 +% A $end
$var wire 1 ,% B $end
$var wire 1 "% cin $end
$var wire 1 (% cout $end
$var wire 1 '% result $end
$var wire 1 -% w1 $end
$var wire 1 .% w2 $end
$var wire 1 /% w3 $end
$upscope $end
$upscope $end
$scope module ALU23 $end
$var wire 1 0% A_invert $end
$var wire 1 1% B_invert $end
$var wire 1 2% cin $end
$var wire 1 3% less $end
$var wire 2 4% operation [1:0] $end
$var wire 1 5% src1 $end
$var wire 1 6% src2 $end
$var wire 1 7% add_r $end
$var wire 1 8% add_c $end
$var reg 1 9% cout $end
$var reg 1 :% result $end
$scope module adder $end
$var wire 1 ;% A $end
$var wire 1 <% B $end
$var wire 1 2% cin $end
$var wire 1 8% cout $end
$var wire 1 7% result $end
$var wire 1 =% w1 $end
$var wire 1 >% w2 $end
$var wire 1 ?% w3 $end
$upscope $end
$upscope $end
$scope module ALU24 $end
$var wire 1 @% A_invert $end
$var wire 1 A% B_invert $end
$var wire 1 B% cin $end
$var wire 1 C% less $end
$var wire 2 D% operation [1:0] $end
$var wire 1 E% src1 $end
$var wire 1 F% src2 $end
$var wire 1 G% add_r $end
$var wire 1 H% add_c $end
$var reg 1 I% cout $end
$var reg 1 J% result $end
$scope module adder $end
$var wire 1 K% A $end
$var wire 1 L% B $end
$var wire 1 B% cin $end
$var wire 1 H% cout $end
$var wire 1 G% result $end
$var wire 1 M% w1 $end
$var wire 1 N% w2 $end
$var wire 1 O% w3 $end
$upscope $end
$upscope $end
$scope module ALU25 $end
$var wire 1 P% A_invert $end
$var wire 1 Q% B_invert $end
$var wire 1 R% cin $end
$var wire 1 S% less $end
$var wire 2 T% operation [1:0] $end
$var wire 1 U% src1 $end
$var wire 1 V% src2 $end
$var wire 1 W% add_r $end
$var wire 1 X% add_c $end
$var reg 1 Y% cout $end
$var reg 1 Z% result $end
$scope module adder $end
$var wire 1 [% A $end
$var wire 1 \% B $end
$var wire 1 R% cin $end
$var wire 1 X% cout $end
$var wire 1 W% result $end
$var wire 1 ]% w1 $end
$var wire 1 ^% w2 $end
$var wire 1 _% w3 $end
$upscope $end
$upscope $end
$scope module ALU26 $end
$var wire 1 `% A_invert $end
$var wire 1 a% B_invert $end
$var wire 1 b% cin $end
$var wire 1 c% less $end
$var wire 2 d% operation [1:0] $end
$var wire 1 e% src1 $end
$var wire 1 f% src2 $end
$var wire 1 g% add_r $end
$var wire 1 h% add_c $end
$var reg 1 i% cout $end
$var reg 1 j% result $end
$scope module adder $end
$var wire 1 k% A $end
$var wire 1 l% B $end
$var wire 1 b% cin $end
$var wire 1 h% cout $end
$var wire 1 g% result $end
$var wire 1 m% w1 $end
$var wire 1 n% w2 $end
$var wire 1 o% w3 $end
$upscope $end
$upscope $end
$scope module ALU27 $end
$var wire 1 p% A_invert $end
$var wire 1 q% B_invert $end
$var wire 1 r% cin $end
$var wire 1 s% less $end
$var wire 2 t% operation [1:0] $end
$var wire 1 u% src1 $end
$var wire 1 v% src2 $end
$var wire 1 w% add_r $end
$var wire 1 x% add_c $end
$var reg 1 y% cout $end
$var reg 1 z% result $end
$scope module adder $end
$var wire 1 {% A $end
$var wire 1 |% B $end
$var wire 1 r% cin $end
$var wire 1 x% cout $end
$var wire 1 w% result $end
$var wire 1 }% w1 $end
$var wire 1 ~% w2 $end
$var wire 1 !& w3 $end
$upscope $end
$upscope $end
$scope module ALU28 $end
$var wire 1 "& A_invert $end
$var wire 1 #& B_invert $end
$var wire 1 $& cin $end
$var wire 1 %& less $end
$var wire 2 && operation [1:0] $end
$var wire 1 '& src1 $end
$var wire 1 (& src2 $end
$var wire 1 )& add_r $end
$var wire 1 *& add_c $end
$var reg 1 +& cout $end
$var reg 1 ,& result $end
$scope module adder $end
$var wire 1 -& A $end
$var wire 1 .& B $end
$var wire 1 $& cin $end
$var wire 1 *& cout $end
$var wire 1 )& result $end
$var wire 1 /& w1 $end
$var wire 1 0& w2 $end
$var wire 1 1& w3 $end
$upscope $end
$upscope $end
$scope module ALU29 $end
$var wire 1 2& A_invert $end
$var wire 1 3& B_invert $end
$var wire 1 4& cin $end
$var wire 1 5& less $end
$var wire 2 6& operation [1:0] $end
$var wire 1 7& src1 $end
$var wire 1 8& src2 $end
$var wire 1 9& add_r $end
$var wire 1 :& add_c $end
$var reg 1 ;& cout $end
$var reg 1 <& result $end
$scope module adder $end
$var wire 1 =& A $end
$var wire 1 >& B $end
$var wire 1 4& cin $end
$var wire 1 :& cout $end
$var wire 1 9& result $end
$var wire 1 ?& w1 $end
$var wire 1 @& w2 $end
$var wire 1 A& w3 $end
$upscope $end
$upscope $end
$scope module ALU30 $end
$var wire 1 B& A_invert $end
$var wire 1 C& B_invert $end
$var wire 1 D& cin $end
$var wire 1 E& less $end
$var wire 2 F& operation [1:0] $end
$var wire 1 G& src1 $end
$var wire 1 H& src2 $end
$var wire 1 I& add_r $end
$var wire 1 J& add_c $end
$var reg 1 K& cout $end
$var reg 1 L& result $end
$scope module adder $end
$var wire 1 M& A $end
$var wire 1 N& B $end
$var wire 1 D& cin $end
$var wire 1 J& cout $end
$var wire 1 I& result $end
$var wire 1 O& w1 $end
$var wire 1 P& w2 $end
$var wire 1 Q& w3 $end
$upscope $end
$upscope $end
$scope module ALU31 $end
$var wire 1 R& A_invert $end
$var wire 1 S& B_invert $end
$var wire 1 T& cin $end
$var wire 1 U& less $end
$var wire 2 V& operation [1:0] $end
$var wire 1 W& src1 $end
$var wire 1 X& src2 $end
$var wire 1 Y& add_r $end
$var wire 1 Z& add_c $end
$var reg 1 [& cout $end
$var reg 1 \& result $end
$scope module adder $end
$var wire 1 ]& A $end
$var wire 1 ^& B $end
$var wire 1 T& cin $end
$var wire 1 Z& cout $end
$var wire 1 Y& result $end
$var wire 1 _& w1 $end
$var wire 1 `& w2 $end
$var wire 1 a& w3 $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 b& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 c& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 d& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 e& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 f& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 g& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 h& i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h&
bx g&
bx f&
bx e&
bx d&
bx c&
b100000 b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
b0 V&
zU&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
b0 F&
zE&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
b0 6&
z5&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
b0 &&
z%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
b0 t%
zs%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
b0 d%
zc%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
b0 T%
zS%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
b0 D%
zC%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
b0 4%
z3%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
b0 $%
z#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
b0 r$
zq$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
b0 b$
za$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
b0 R$
zQ$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
b0 B$
zA$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
b0 2$
z1$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
b0 "$
z!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
b0 p#
zo#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
b0 `#
z_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
b0 P#
zO#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
b0 @#
z?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
b0 0#
z/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
b0 ~"
z}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
b0 n"
zm"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
b0 ^"
z]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
b0 N"
zM"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
b0 >"
z="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
b0 ."
z-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
b0 |
z{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
b0 l
zk
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
b0 \
z[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
b0 L
zK
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
b0 <
z;
0:
09
08
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
01
b0 0
b0 /
0.
b0 -
b0 ,
b0 +
b0 *
0)
0(
0'
bx &
b0 %
b0 $
0#
bx "
b111 !
$end
#5000
b100000 b&
1)
#10000
0)
#15000
b100000 b&
1)
#20000
0)
#25000
b100000 b&
1)
#30000
0)
#35000
b100000 b&
1)
#40000
0)
#45000
b100000 b&
1)
#50000
0)
1.
#55000
1?
19
1:
b11 <
1I
b11 L
1Y
b11 \
1i
b11 l
1y
b11 |
1+"
b11 ."
1;"
b11 >"
1K"
b11 N"
1["
b11 ^"
1k"
b11 n"
1{"
b11 ~"
1-#
b11 0#
1=#
b11 @#
1M#
b11 P#
1]#
b11 `#
1m#
b11 p#
1}#
b11 "$
1/$
b11 2$
1?$
b11 B$
1O$
b11 R$
1_$
b11 b$
1o$
b11 r$
1!%
b11 $%
11%
b11 4%
1A%
b11 D%
1Q%
b11 T%
1a%
b11 d%
1q%
b11 t%
1#&
b11 &&
13&
b11 6&
1C&
b11 F&
1S&
b11 V&
1>
1N
1^
1n
1~
10"
1@"
1P"
1`"
1p"
1"#
12#
1B#
1R#
1b#
1r#
1$$
14$
1D$
1T$
1d$
1t$
1&%
16%
1F%
1V%
1f%
1v%
1(&
18&
1H&
1X&
b1100 !
b1 -
b111 ,
b111 2
b11111111111111111111111111111111 0
b11111111111111111111111111111111 4
b100 $
1#
b100000 c&
1)
#60000
0)
#65000
1_
1A"
13#
1E$
1U$
17%
1w%
1@
1P
1o
12"
1Q"
1q"
1$#
1D#
1T#
1s#
1%$
1e$
1v$
1(%
1G%
1X%
1h%
1)&
19&
1J&
1Z&
1e
1G"
19#
1K$
1[$
1=%
1}%
1F
1V
1u
18"
1W"
1w"
1*#
1J#
1Z#
1y#
1+$
1k$
1|$
1.%
1M%
1^%
1n%
1/&
1?&
1P&
1`&
1C
1S
1c
15"
1E"
1'#
17#
1G#
1W#
1I$
1Y$
1y$
1+%
1;%
1[%
1k%
1{%
1M&
1]&
1D
1B
1T
1R
1t
16"
14"
1V"
1v"
1(#
1&#
1H#
1F#
1X#
1V#
1x#
1*$
1j$
1z$
1x$
1,%
1*%
1L%
1\%
1Z%
1l%
1j%
1.&
1>&
1N&
1L&
1^&
b11000110011000000011010000100011 5
1\&
18
b0 <
1H
b0 L
1X
b0 \
1h
b0 l
1x
b0 |
1*"
b0 ."
1:"
b0 >"
1J"
b0 N"
1Z"
b0 ^"
1j"
b0 n"
1z"
b0 ~"
1,#
b0 0#
1<#
b0 @#
1L#
b0 P#
1\#
b0 `#
1l#
b0 p#
1|#
b0 "$
1.$
b0 2$
1>$
b0 B$
1N$
b0 R$
1^$
b0 b$
1n$
b0 r$
1~$
b0 $%
10%
b0 4%
1@%
b0 D%
1P%
b0 T%
1`%
b0 d%
1p%
b0 t%
1"&
b0 &&
12&
b0 6&
1B&
b0 F&
1R&
b0 V&
0>
0N
0n
00"
0P"
0p"
0"#
0B#
0R#
0r#
0$$
0d$
0t$
0&%
0F%
0V%
0f%
0(&
08&
0H&
0X&
1m
1}
1O"
1_"
1o"
1a#
1q#
1#$
13$
1c$
1E%
1'&
17&
b110 !
b0 &
b100 "
b10 -
b1100 ,
b1100 2
b1000100011100100100101010100 0
b1000100011100100100101010100 4
b110001000100111100001110011000 /
b110001000100111100001110011000 3
b100000 h&
1)
11
#70000
0)
#75000
1$"
1d"
18$
1!"
1a"
1##
15$
1u$
1W%
1I&
11"
1C#
1z
1\"
1|"
1~#
10$
1p$
1R%
14&
1D&
1j
1,"
1L"
1l"
1>#
1@$
1P$
1`$
1B%
1$&
1n#
1q
1S"
1s"
1u#
1'$
1g$
1I%
1+&
1;&
0B
1a
1#"
1C"
1c"
15#
17$
1G$
1W$
19%
1y%
1e#
1f#
1o
1p
1Q"
1R"
1q"
1r"
1s#
1t#
1%$
1&$
1e$
1f$
1G%
1H%
1)&
1*&
19&
1:&
0?
1G
1@
1`
1""
1B"
1b"
14#
1d#
16$
1E$
1F$
1U$
1V$
18%
1x%
1O
1S#
1c#
1'%
1g%
1Y&
0u
1v
0W"
1X"
0w"
1x"
0y#
1z#
0+$
1,$
0k$
1l$
0M%
1N%
0/&
10&
0?&
1@&
1E
0F
0e
1f
1("
0G"
1H"
1h"
09#
1:#
1j#
1<$
0K$
1L$
0[$
1\$
0=%
1>%
0}%
1~%
1J
1Z
1<"
1.#
1N#
1^#
1"%
12%
1b%
1r%
1T&
1s
1r
1%"
1U"
1T"
1e"
1u"
1t"
1g#
1w#
1v#
1)$
1($
19$
1i$
1h$
1K%
1J%
1-&
1,&
1=&
1<&
0D
1d
1&"
1F"
1f"
18#
1h#
1:$
1J$
1Z$
1<%
1|%
1A
1Q
1R
1b
13"
14"
1D"
1%#
1&#
16#
1E#
1F#
1U#
1V#
1H$
1X$
1w$
1x$
1)%
1*%
1:%
1Y%
1Z%
1i%
1j%
1z%
1K&
1L&
b11111111111111111111111111111111 6
1[&
b11111111111111111111111111111110 5
1\&
08
b10 <
0H
b10 L
0X
b10 \
0h
b10 l
0x
b10 |
0*"
b10 ."
0:"
b10 >"
0J"
b10 N"
0Z"
b10 ^"
0j"
b10 n"
0z"
b10 ~"
0,#
b10 0#
0<#
b10 @#
0L#
b10 P#
0\#
b10 `#
0l#
b10 p#
0|#
b10 "$
0.$
b10 2$
0>$
b10 B$
0N$
b10 R$
0^$
b10 b$
0n$
b10 r$
0~$
b10 $%
00%
b10 4%
0@%
b10 D%
0P%
b10 T%
0`%
b10 d%
0p%
b10 t%
0"&
b10 &&
02&
b10 6&
0B&
b10 F&
0R&
b10 V&
1>
0^
0~
0@"
0`"
02#
0b#
04$
0D$
0T$
06%
0v%
1=
1M
1]
1/"
1?"
1!#
11#
1A#
1Q#
1C$
1S$
1s$
1%%
15%
1U%
1e%
1u%
1G&
1W&
b11000110011000000011010000100011 %
b11000110011000000011010000100011 7
b10 !
b11000110011000000011010000100011 &
b0 "
b11 -
b110 ,
b110 2
b1 0
b1 4
b11111111111111111111111111111111 /
b11111111111111111111111111111111 3
b0 $
0#
b100000 g&
1)
#80000
0)
#85000
0x$
1<&
1\&
1r
0$"
04"
1d"
0&#
0f#
08$
0*%
0Z%
0u$
19&
1Y&
1o
0!"
01"
1a"
0##
0c#
05$
0'%
0W%
1Z
0N#
0`$
0p$
14&
1T&
1j
0z
0,"
1L"
1\"
0l"
0|"
0.#
0>#
0^#
0~#
00$
0P$
0"%
0R%
1J
1Q
0R
0E#
1F#
0W$
1X$
0g$
1h$
1+&
0,&
1K&
0L&
1a
0b
0q
0#"
1C"
0D"
1S"
0T"
0c"
0s"
1t"
0%#
05#
16#
0U#
1V#
0u#
0'$
1($
0G$
0w$
0I%
0[&
b1111110110000100100000011100111 6
1A
0O
1W
1P
1C#
0K#
0D#
1U$
0]$
0V$
1e$
0m$
0f$
0)&
11&
1*&
0I&
1Q&
1J&
0_
1g
1`
0p
0""
0A"
1I"
1B"
0Q"
1Y"
1R"
0b"
1q"
0y"
0r"
0$#
13#
0;#
04#
1S#
0[#
0T#
0t#
1%$
0-$
0&$
0F$
0v$
0H%
0Z&
0E
1F
1@
1U
0V
1I#
0J#
1[$
0\$
1k$
0l$
1/&
00&
1O&
0P&
1e
0f
0v
0("
1G"
0H"
1W"
0X"
0h"
1w"
0x"
0*#
19#
0:#
1Y#
0Z#
0z#
1+$
0,$
0L$
0|$
0N%
0`&
1D
b10101101100111011011101100001000 5
0B
0?
0G
0T
0t
0&"
0f"
0(#
0H#
0x#
0J$
0Z$
0j$
0z$
0L%
0.&
0N&
0^&
0c
0s
0%"
0E"
0U"
0e"
0u"
0'#
07#
0W#
0w#
0)$
0I$
0y$
0K%
0]&
09
0:
0I
0Y
0i
0y
0+"
0;"
0K"
0["
0k"
0{"
0-#
0=#
0M#
0]#
0m#
0}#
0/$
0?$
0O$
0_$
0o$
0!%
01%
0A%
0Q%
0a%
0q%
0#&
03&
0C&
0S&
1^
10"
1@"
1P"
1p"
12#
1R#
1b#
1$$
14$
1&%
16%
1V%
1f%
1v%
18&
0]
0m
0}
0?"
0O"
0_"
0o"
0!#
01#
0Q#
0q#
0#$
0C$
0s$
0E%
0W&
b11111111111111111111111111111110 %
b11111111111111111111111111111110 7
b1 !
b11111111111111111111111111111110 &
b10 "
b100 -
b10 ,
b10 2
b101110110000110110101011100101 0
b101110110000110110101011100101 4
b1111110110110100101000000100011 /
b1111110110110100101000000100011 3
b10 $
1(
b100000 f&
1)
#90000
0)
#95000
0`
0P
0B"
0*&
0J&
0R"
1_
0g
1?
0@
1O
0W
11"
02"
1A"
0I"
1c#
0d#
15$
06$
1'%
0(%
08%
1W%
0X%
0h%
0x%
1)&
01&
0:&
1I&
0Q&
1!"
1Q"
0Y"
1##
1u$
0Z
04&
0T&
1E
0F
0J
17"
08"
0<"
1i#
0j#
0n#
1;$
0<$
0@$
1-%
0.%
02%
1=%
0>%
0B%
1]%
0^%
0b%
1m%
0n%
0r%
1}%
0~%
0$&
1?&
0@&
0D&
0j
1u
1'"
0L"
0\"
1g"
1)#
1y#
1K$
1{$
1M%
1_&
0Q
1R
0+&
1,&
0K&
1L&
0D
0A
1B
0d
06"
03"
14"
0F"
0V"
0v"
08#
0X#
0h#
0e#
1f#
0*$
0:$
07$
18$
0,%
0)%
1*%
0<%
09%
0\%
0Y%
1Z%
0l%
0i%
0|%
0y%
0>&
0;&
1c
0a
1b
1s
1%"
1$"
1E"
0C"
1D"
1U"
b0 6
0S"
1T"
1e"
1u"
1'#
1&#
17#
1W#
1w#
1)$
1I$
1y$
b11111111111111111111111111111111 5
1x$
1K%
1]&
b1 <
b1 L
b1 \
b1 l
b1 |
b1 ."
b1 >"
b1 N"
b1 ^"
b1 n"
b1 ~"
b1 0#
b1 @#
b1 P#
b1 `#
b1 p#
b1 "$
b1 2$
b1 B$
b1 R$
b1 b$
b1 r$
b1 $%
b1 4%
b1 D%
b1 T%
b1 d%
b1 t%
b1 &&
b1 6&
b1 F&
b1 V&
0>
0^
00"
0@"
0P"
0p"
02#
0R#
0b#
0$$
04$
0&%
06%
0V%
0f%
0v%
08&
1]
1m
1}
1?"
1O"
1_"
1o"
1!#
11#
1Q#
1q#
1#$
1C$
1s$
1E%
1W&
b10101101100111011011101100001000 %
b10101101100111011011101100001000 7
b0 !
b10101101100111011011101100001000 &
b1 "
b101 -
b1 ,
b1 2
b0 0
b0 4
b11111111111111111111111111111111 /
b11111111111111111111111111111111 3
1'
b1 $
0(
b100000 e&
1)
#100000
0)
#105000
1D
1T
1d
1t
1&"
16"
1F"
1V"
1f"
1v"
1(#
18#
1H#
1X#
1h#
1x#
1*$
1:$
1J$
1Z$
1j$
1z$
1,%
1<%
1L%
1\%
1l%
1|%
1.&
1>&
1N&
1^&
0C
0B
0S
0R
0c
0b
0s
0r
0%"
0$"
05"
04"
0E"
0D"
0U"
0T"
0e"
0d"
0u"
0t"
0'#
0&#
07#
06#
0G#
0F#
0W#
0V#
0g#
0f#
0w#
0v#
0)$
0($
09$
08$
0I$
0H$
0Y$
0X$
0i$
0h$
0y$
0x$
0+%
0*%
0;%
0:%
0K%
0J%
0[%
0Z%
0k%
0j%
0{%
0z%
0-&
0,&
0=&
0<&
0M&
0L&
0]&
b0 5
0\&
b0 <
b0 L
b0 \
b0 l
b0 |
b0 ."
b0 >"
b0 N"
b0 ^"
b0 n"
b0 ~"
b0 0#
b0 @#
b0 P#
b0 `#
b0 p#
b0 "$
b0 2$
b0 B$
b0 R$
b0 b$
b0 r$
b0 $%
b0 4%
b0 D%
b0 T%
b0 d%
b0 t%
b0 &&
b0 6&
b0 F&
b0 V&
1>
1N
1^
1n
1~
10"
1@"
1P"
1`"
1p"
1"#
12#
1B#
1R#
1b#
1r#
1$$
14$
1D$
1T$
1d$
1t$
1&%
16%
1F%
1V%
1f%
1v%
1(&
18&
1H&
1X&
0=
0M
0]
0m
0}
0/"
0?"
0O"
0_"
0o"
0!#
01#
0A#
0Q#
0a#
0q#
0#$
03$
0C$
0S$
0c$
0s$
0%%
05%
0E%
0U%
0e%
0u%
0'&
07&
0G&
0W&
b11111111111111111111111111111111 %
b11111111111111111111111111111111 7
bx !
b11111111111111111111111111111111 &
b0 "
b110 -
b0 ,
b0 2
b11111111111111111111111111111111 0
b11111111111111111111111111111111 4
b0 /
b0 3
b0 $
0'
b100000 d&
1)
#110000
0)
#115000
xO
xP
x_
x`
xo
xp
x!"
x""
x1"
x2"
xA"
xB"
xQ"
xR"
xa"
xb"
xq"
xr"
x##
x$#
x3#
x4#
xC#
xD#
xS#
xT#
xc#
xd#
xs#
xt#
x%$
x&$
x5$
x6$
xE$
xF$
xU$
xV$
xe$
xf$
xu$
xv$
x'%
x(%
x7%
x8%
xG%
xH%
xW%
xX%
xg%
xh%
xw%
xx%
x)&
x*&
x9&
x:&
xI&
xJ&
xY&
xZ&
x@
xE
xF
xU
xV
xe
xf
xu
xv
x'"
x("
x7"
x8"
xG"
xH"
xW"
xX"
xg"
xh"
xw"
xx"
x)#
x*#
x9#
x:#
xI#
xJ#
xY#
xZ#
xi#
xj#
xy#
xz#
x+$
x,$
x;$
x<$
xK$
xL$
x[$
x\$
xk$
xl$
x{$
x|$
x-%
x.%
x=%
x>%
xM%
xN%
x]%
x^%
xm%
xn%
x}%
x~%
x/&
x0&
x?&
x@&
xO&
xP&
x_&
x`&
x?
xG
xD
xT
xd
xt
x&"
x6"
xF"
xV"
xf"
xv"
x(#
x8#
xH#
xX#
xh#
xx#
x*$
x:$
xJ$
xZ$
xj$
xz$
x,%
x<%
xL%
x\%
xl%
x|%
x.&
x>&
xN&
x^&
xC
xS
xc
xs
x%"
x5"
xE"
xU"
xe"
xu"
x'#
x7#
xG#
xW#
xg#
xw#
x)$
x9$
xI$
xY$
xi$
xy$
x+%
x;%
xK%
x[%
xk%
x{%
x-&
x=&
xM&
x]&
x8
x9
x:
bx <
xH
xI
bx L
xX
xY
bx \
xh
xi
bx l
xx
xy
bx |
x*"
x+"
bx ."
x:"
x;"
bx >"
xJ"
xK"
bx N"
xZ"
x["
bx ^"
xj"
xk"
bx n"
xz"
x{"
bx ~"
x,#
x-#
bx 0#
x<#
x=#
bx @#
xL#
xM#
bx P#
x\#
x]#
bx `#
xl#
xm#
bx p#
x|#
x}#
bx "$
x.$
x/$
bx 2$
x>$
x?$
bx B$
xN$
xO$
bx R$
x^$
x_$
bx b$
xn$
xo$
bx r$
x~$
x!%
bx $%
x0%
x1%
bx 4%
x@%
xA%
bx D%
xP%
xQ%
bx T%
x`%
xa%
bx d%
xp%
xq%
bx t%
x"&
x#&
bx &&
x2&
x3&
bx 6&
xB&
xC&
bx F&
xR&
xS&
bx V&
x>
xN
x^
xn
x~
x0"
x@"
xP"
x`"
xp"
x"#
x2#
xB#
xR#
xb#
xr#
x$$
x4$
xD$
xT$
xd$
xt$
x&%
x6%
xF%
xV%
xf%
xv%
x(&
x8&
xH&
xX&
x=
xM
x]
xm
x}
x/"
x?"
xO"
x_"
xo"
x!#
x1#
xA#
xQ#
xa#
xq#
x#$
x3$
xC$
xS$
xc$
xs$
x%%
x5%
xE%
xU%
xe%
xu%
x'&
x7&
xG&
xW&
b0 %
b0 7
b0 &
b100 "
b111 -
bx ,
bx 2
bx 0
bx 4
bx /
bx 3
b100 $
1#
b100000 c&
1)
#120000
0)
#125000
1)
